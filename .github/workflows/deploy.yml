name: deploy

on:
  push:
    branches: [ "main", "develop", "release/test" ]
  pull_request:
    branches: [ "main", "develop", "release/test" ]

jobs:
  # Build and Test
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore ./src
    - name: Build
      run: dotnet build --no-restore ./src
  
  # Run Tests
  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore ./src
    - name: Build
      run: dotnet build --no-restore ./src
    - name: Test
      run: dotnet test --no-build --verbosity normal ./src
  
  # Deploy to AWS using Terraform
  deploy:
    name: "Terraform"
    needs: tests
    runs-on: ubuntu-latest
    environment: ${{ 
      startsWith(github.ref, 'refs/heads/release/') && 'test' || 
      github.ref == 'refs/heads/main' && 'prod' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_environment_name: ${{ 
        startsWith(github.ref, 'refs/heads/release/test') && 'test' || 
        github.ref == 'refs/heads/main' && 'prod' }}
      TF_VAR_aws_cognito_callback_urls: ${{ secrets.AWS_COGNITO_CALLBACK_URLS }}
      TF_VAR_google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
      TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      ENV: ${{ 
        startsWith(github.ref, 'refs/heads/release/') && 'test' || 
        github.ref == 'refs/heads/main' && 'prod' }}
    defaults:
      run:
        working-directory: terraform
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release/test'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.2
          terraform_wrapper: false
      
      - name: Print Environment Variables 1
        run: |
          echo "ENV: $ENV"
          echo "TF_VAR_environment_name: $TF_VAR_environment_name"
          
      - name: Verify appsettings.json Exists
        run: |
          if [ ! -f $GITHUB_WORKSPACE/src/RecipeAPI/appsettings.json ]; then
            echo "Error: appsettings.json not found!"
            exit 1
          fi

      - name: Replace settings in appsettings.json
        run: |
          sed -i 's|__APP-ID__|${{ secrets.EDAMAME_APP_ID }}|g' $GITHUB_WORKSPACE/src/RecipeAPI/appsettings.json
          sed -i 's|__APP-KEY__|${{ secrets.EDAMAME_APP_KEY }}|g' $GITHUB_WORKSPACE/src/RecipeAPI/appsettings.json
          sed -i 's|__API-KEY__|${{ secrets.SPOONACULAR_API_KEY }}|g' $GITHUB_WORKSPACE/src/RecipeAPI/appsettings.json

      - name: Terraform Init with dynamic backend
        id: init
        run: |
          terraform init \
            -backend-config="bucket=recipe-terraform-s3-state-${ENV}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=recipe-terraform-state-lock-dynamo-${ENV}" \
            -backend-config="encrypt=true" \
            -backend-config="acl=bucket-owner-full-control"

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve
